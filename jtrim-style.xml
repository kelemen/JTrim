<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <module name="JavadocPackage"/>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <module name="FileLength"/>
    <module name="FileTabCharacter"/>

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="scope" value="protected"/>
            <property name="allowUndeclaredRTE" value="true"/>
        </module>
        <module name="JavadocType">
            <property name="scope" value="protected"/>
        </module>
        <module name="JavadocVariable">
            <property name="scope" value="protected"/>
        </module>
        <module name="JavadocStyle">
            <property name="scope" value="protected"/>
            <!-- This is false, because of the false reports when using      -->
            <!-- inheritDoc to get doc from external (Java) apidoc           -->
            <property name="checkFirstSentence" value="false"/>
        </module>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <property name="severity" value="warning"/>
            <property name="ignorePattern" value="^ *\* *\{?@"/>
        </module>
        <module name="MethodLength"/>
        <module name="ParameterNumber">
            <!-- Implementing interfaces of external libraries -->
            <!-- will trigger this check and we cannot do      -->
            <!-- anything about it.                            -->
            <property name="severity" value="warning"/>
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS, TYPECAST"/>
        </module>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <module name="WhitespaceAround"/>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="LeftCurly"/>
        <module name="NeedBraces">
            <!-- Do not use for LITERAL_IF, LITERAL_ELSE because -->
            <!-- it makes simple ifs unreadable. -->
            <property name="tokens" value="LITERAL_DO, LITERAL_FOR, LITERAL_WHILE"/>
        </module>
        <module name="RightCurly">
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY"/>
            <property name="option" value="same"/>
        </module>
        <module name="RightCurly">
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE"/>
            <property name="option" value="alone"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- DoubleCheckedLocking does not seem to be supported by Gradle. -->
        <!-- <module name="DoubleCheckedLocking"/> -->
        <module name="EmptyStatement"/>
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment">
            <!-- This check fails on try-with-resources constructs. -->
            <property name="severity" value="warning"/>
        </module>
        <module name="MagicNumber">
            <property name="ignoreHashCodeMethod" value="true"/>
            <property name="ignoreAnnotation" value="true"/>
            <!-- 100 is ignored because it is used for percentage conversion.-->
            <property name="ignoreNumbers" value="-1, 0, 1, 2, 100"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <!-- In private nested classes, breaking this rule for struct like -->
        <!-- classes is fine.                                              -->
        <!--<module name="VisibilityModifier"/>-->


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="TodoComment"/>
        <module name="UpperEll"/>


      <!-- Checks that classes that define a covariant equals() method also
           override method equals(java.lang.Object). -->
      <module name="CovariantEquals">
         <property name="severity" value="error"/>
      </module>

      <!-- Checks that string literals are not used with == or !=. -->
      <module name="StringLiteralEquality">
         <property name="severity" value="error"/>
      </module>

      <!--  Checks that an overriding clone() method invokes super.clone(). -->
      <module name="SuperClone">
         <property name="severity" value="error"/>
      </module>

      <!-- Checks cyclomatic complexity against a specified limit. -->
      <module name="CyclomaticComplexity">
         <property name="max" value="12"/>
         <property name="severity" value="warning"/>
      </module>
      <module name="CyclomaticComplexity">
         <property name="max" value="20"/>
         <property name="severity" value="error"/>
      </module>

    </module>

</module>