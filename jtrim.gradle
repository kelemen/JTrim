//
// This file is to be applied to each JTrim projects.
//

apply plugin: 'java';
apply from: rootProject.file('jtrim-version.gradle');

ext.scriptFile = { String fileName ->
    return new File(new File(rootDir, 'common-scripts'), fileName);
}

apply plugin: 'checkstyle';
checkstyle.configFile = rootProject.file('jtrim-style.xml');

checkstyleTest.configFile = rootProject.file('jtrim-test-style.xml');
checkstyleTest.classpath = project.files { project.files(sourceSets.test.output, configurations.testRuntime.resolve()) }

checkstyleMain.classpath = project.files { project.files(sourceSets.main.output, configurations.runtime.resolve()) }

def codeCoverage = getStringProperty('codeCoverage', '');
if (!codeCoverage.isEmpty()) {
    apply from: scriptFile(codeCoverage + '.gradle');
}

apply from: scriptFile('release.gradle');

sourceCompatibility = '1.7';

def compilerOptions = [compileJava, compileTestJava]*.options;
compilerOptions*.encoding = 'UTF-8';
compilerOptions*.compilerArgs = ['-Xlint'];

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources';
    from sourceSets.main.allSource;
}

artifacts {
    archives jar
    archives sourcesJar
}

repositories {
    mavenCentral();
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11';
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5';
}

afterEvaluate {
    System.setProperty('line.separator', '\n');
}

apply from: scriptFile('maven-publish.gradle');

private String getStringProperty(String name, String defaultValue) {
    if (!hasProperty(name)) {
        return defaultValue;
    }

    def propertyValue = getProperty(name);
    return propertyValue != null ? propertyValue.toString().trim() : defaultValue;
}

private boolean printIfFailing(File file) {
    try {new String()
        String content = new String(
            java.nio.file.Files.readAllBytes(file.toPath()),
            java.nio.charset.Charset.defaultCharset());

        if (content.indexOf('</failure>') >= 0) {
            println "Failing test ${file.name}:\n${content}\n\n";
            return true;
        }
    } catch (IOException ex) {
        // ignore silently
    }
    return false;
}

if (project.hasProperty('printTestErrorXmls')) {
    gradle.projectsEvaluated {
        test.ignoreFailures = true;
        test.doLast {
            int numberOfFailures = 0;
            for (File file: test.reports.junitXml.destination.listFiles()) {
                String nameLowerCase = file.name.toLowerCase(Locale.ROOT);
                if (nameLowerCase.startsWith('test-') && nameLowerCase.endsWith('.xml')) {
                    if (printIfFailing(file)) {
                        numberOfFailures++;
                    }
                }
            }

            if (numberOfFailures > 0) {
                throw new RuntimeException("There were ${numberOfFailures} failing test classes.");
            }
        }
    }
}
