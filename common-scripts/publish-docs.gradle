import org.gradle.api.*;
import org.gradle.api.file.*;
import org.gradle.api.tasks.util.*;
import org.apache.commons.io.*;
import org.eclipse.jgit.api.*;
import org.eclipse.jgit.storage.file.*;

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:2.2.0.201212191850-r'
        classpath 'commons-io:commons-io:2.4'
    }
}

if (!project.hasProperty('releaseApiDocRepo')) {
    throw new RuntimeException('You must specify the the "releaseApiDocRepo" property to publish the javadoc.');
}

File apiDocRoot = new File(releaseApiDocRepo.toString());
if (!apiDocRoot.isDirectory()) {
    throw new RuntimeException("The directory ${apiDocRoot} does not exist.");
}
if (!new File(apiDocRoot, '.git').isDirectory()) {
    throw new RuntimeException("'The directory ${apiDocRoot} is not a git repository.");
}

private void prepareContent(File apiDocPath) {
    FileUtils.deleteDirectory(apiDocPath);
    FileUtils.copyDirectory(javadoc.destinationDir, apiDocPath, false);
}

task releaseApiDoc(dependsOn: 'javadoc') doLast {
    String apiDirName = 'api';
    File apiDocPath = new File(apiDocRoot, apiDirName);

    def gitRepo = new FileRepository(new File(apiDocRoot, '.git'));
    try {
        def git = new Git(gitRepo);

        git.clean().call();

        String branchName = project.name;

        def checkout = git.checkout();
        checkout.createBranch = false;
        checkout.name = branchName;
        checkout.call();
        checkout.getResult(); 

        prepareContent(apiDocPath);

        def addCommand = git.add();

        def pattern = new PatternSet();
        pattern.include(apiDirName + '/**');

        def includePath = project.fileTree(apiDocRoot, null).matching(pattern);
        includePath.visit(new FileVisitor() {
            public void visitDir(FileVisitDetails arg0) {
            }
            public void visitFile(FileVisitDetails arg0) {
                addCommand.addFilepattern(arg0.getPath());
            }
        });

         addCommand.update = false;
         addCommand.call();

         def commit = git.commit();

         commit.all = true;
         commit.message = "Added API doc for ${project.displayName} ${project.version}.".toString();
         commit.call();
     } finally {
         gitRepo.close();
     }
}
