package org.jtrim2.executor;

import java.util.concurrent.CancellationException;
import java.util.concurrent.TimeUnit;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import static org.junit.Assert.*;

public class CanceledFutureTest {

    public CanceledFutureTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    @Test
    public void testAutoGenerated() {
        assertEquals(1, CanceledFuture.values().length);
        assertSame(CanceledFuture.INSTANCE, CanceledFuture.valueOf(CanceledFuture.INSTANCE.toString()));
    }

    /**
     * Test of cancel method, of class CanceledFuture.
     */
    @Test
    public void testCancel() {
        assertTrue(CanceledFuture.INSTANCE.cancel(true));
        assertTrue(CanceledFuture.INSTANCE.cancel(false));
    }

    /**
     * Test of isCancelled method, of class CanceledFuture.
     */
    @Test
    public void testIsCancelled() {
        assertTrue(CanceledFuture.INSTANCE.isCancelled());
    }

    /**
     * Test of isDone method, of class CanceledFuture.
     */
    @Test
    public void testIsDone() {
        assertTrue(CanceledFuture.INSTANCE.isDone());
    }

    /**
     * Test of get method, of class CanceledFuture.
     */
    @Test(expected = CancellationException.class)
    public void testGet_0args() {
        CanceledFuture.INSTANCE.get();
    }

    /**
     * Test of get method, of class CanceledFuture.
     */
    @Test(expected = CancellationException.class)
    public void testGet_long_TimeUnit() {
        CanceledFuture.INSTANCE.get(0, TimeUnit.NANOSECONDS);
    }
}
